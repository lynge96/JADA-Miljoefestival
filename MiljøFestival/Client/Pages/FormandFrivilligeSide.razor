@page "/formandFrivilligeSide"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger loggedInBruger

@if (brugerListeUnsorted == null)
{
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!loggedInBruger.ErFormand())
{
    <div class="alert alert-info col-md-3 mx-auto">
        <span class="bi bi-door-open-fill" aria-hidden="true"></span>
        <strong> Hov!</strong> Du skal være logget på en formand bruger for at se denne side.
    </div>
}
else if (loggedInBruger.ErFormand())
{
    <main class="col-md-8 mx-auto">

        <h1 class="display-4">Overblik over alle frivillige</h1>

        <h2 class="mt-3">Formænd</h2>

        <div class="table-responsive rounded mb-3">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th class="col-md-1">ID</th>
                        <th class="col-md-4">Navn</th>
                        <th class="col-md-3">Telefon</th>
                        <th class="col-md-4">Email</th>
                    </tr>
                </thead>
                <tbody>
                    @* Laver en række for hver formand  *@
                    @foreach (var bruger in formandListe)
                    {
                        <tr>
                            <th>@bruger.Bruger_Id</th>
                            <td>@bruger.Fornavn @bruger.Efternavn</td>
                            <td>@bruger.Telefon</td>
                            <td>@bruger.Email</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h2 class="mt-3">Koordinatorer</h2>
        <p class="lead">Herunder kan du se alle koordinatorerne til festivalen, og du også mulighed for at ændre dem tilbage til almindelige frivillige.</p>
        <div class="table-responsive rounded">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Navn</th>
                        <th>Telefon</th>
                        <th>Email</th>
                        <th>Adresse</th>
                        <th>Team</th>
                        <th>Koordinator</th>
                    </tr>
                </thead>
                <tbody>

                    @* Laver en række for hver koordinator med alt deres information *@
                    @foreach (var bruger in koordinatorListe)
                    {
                        <tr>
                            <th>@bruger.Bruger_Id</th>
                            <td>@bruger.Fornavn @bruger.Efternavn</td>
                            <td>@bruger.Telefon</td>
                            <td>@bruger.Email</td>
                            <td>@bruger.Adresse</td>
                            <td>
                                @* Gør det muligt at ændre teamet for en bruger *@
                                <select class="form-select" @bind-value="bruger.Team" @onchange="() => OpdaterBruger(bruger)" @bind-value:event="oninput">
                                    @foreach (var team in teams)
                                    {
                                        <option value="@team" selected=@(bruger.Team == team)>@team</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    @* Gør det muligt at ændre koordinator-status for den frivillige *@
                                    @if (bruger.ErKoordinator())
                                    {
                                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }" checked>
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }">
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h2 class="mt-3">Frivillige</h2>
        <p class="lead">
            Her har du mulighed for at flytte frivillige fra et hold til et andet, hvis det skulle blive nødvendigt.
            Yderligere kan du opgradere en frivillig til koordinator.
            <br /><br /><i>OBS:</i> Gøres dette, bliver alle vagterne, som brugeren eventuelt havde taget, frigivet tilbage til brugerens tidligere team.  <br /><br />
        </p>

        @* Gør det muligt for formanden at sortere i de frivillige ud fra deres kompetencer*@
        <div class="flex-md-wrap mt-3">
            <p class="mb-0">Sorter efter: </p>
            @foreach (var kompetence in alleKompetencer)
            {
                <div class="form-check form-check-inline mb-2">
                    <input type="checkbox" class="form-check-input" id="defaultCheck" @onchange="eventArgs => { CheckboxKompetencer(kompetence, eventArgs.Value); }">
                    <label class="form-check-label" for="defaultCheck">@kompetence.Kompetence_Navn</label>
                </div>
            }
        </div>

        <div class="table-responsive rounded">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Navn</th>
                        <th>Telefon</th>
                        <th>Email</th>
                        <th>Adresse</th>
                        <th>Team</th>
                        <th>Koordinator</th>
                    </tr>
                </thead>
                <tbody>
                    @* Laver en række pr. frivillig med alt deres information *@
                    @foreach (var bruger in frivilligListe)
                    {
                        <tr>
                            <th>@bruger.Bruger_Id</th>
                            <td>@bruger.Fornavn @bruger.Efternavn</td>
                            <td>@bruger.Telefon</td>
                            <td>@bruger.Email</td>
                            <td>@bruger.Adresse</td>
                            <td>
                                @* Gør det muligt at ændre teamet for en bruger *@
                                <select class="form-select" @bind-value="bruger.Team" @onchange="() => OpdaterBruger(bruger)" @bind-value:event="oninput">
                                    @foreach (var team in teams)
                                    {
                                        <option value="@team" selected=@(bruger.Team == team)>@team</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    @* Gør det muligt at ændre koordinator-status for den frivillige *@
                                    @if (!bruger.ErKoordinator())
                                    {
                                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }">
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }" checked>

                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </main>

}


@code {
    private List<Bruger> frivilligListe;
    private List<Bruger> koordinatorListe;
    private List<Bruger> formandListe;
    private List<Bruger> brugerListeUnsorted;
    private List<Bruger> brugerListe;
    private List<Kompetence> alleKompetencer = new List<Kompetence>();
    private List<string> teams = new List<string>();
    private List<string> valgteKompetencer = new List<string>();

    // Henter lister for alle brugere, frivillige, koordinatorer, formænd, teams og kompetencer
    protected override async Task OnInitializedAsync()
    {
        brugerListeUnsorted = await Http.GetFromJsonAsync<List<Bruger>>("Bruger/all");

        brugerListe = await HentKompetencer(brugerListeUnsorted);

        frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

        koordinatorListe = brugerListe.FindAll(q => q.Rolle_Id == 1).OrderBy(q => q.Team).ToList();

        formandListe = brugerListe.FindAll(q => q.Rolle_Id == 3);

        teams = await Http.GetFromJsonAsync<List<string>>("Team/all");

        alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");
    }

    // Gemmer ændringer som koordinator
    private async Task CheckboxClicked(Bruger bruger, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            bruger.Rolle_Id = 1;

            bruger.Rolle = "Koordinator";

            await OpdaterBruger(bruger);
        }
        else
        {
            bruger.Rolle_Id = 2;

            bruger.Rolle = "Frivillig";

            await OpdaterBruger(bruger);
        }
    }

    // Sorterer frivillige efter valgte kompetencer. Ændre frivilliglisten,
    // så kun dem med valgte kompetencer vises
    private void CheckboxKompetencer(Kompetence kompetence, object checkedValue)
    {
        // Hvis chexboxen er checked
        if ((bool)checkedValue)
        {
            List<Bruger> nyListe = new List<Bruger>();

            valgteKompetencer.Add(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }

                frivilligListe = nyListe;

                nyListe = new List<Bruger>();
            }
        }
        //Hvis checkboxen ikke er checked
        else
        {
            List<Bruger> nyListe = new();

            valgteKompetencer.Remove(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }

                frivilligListe = nyListe;

                nyListe = new List<Bruger>();
            }
        }
    }


    // Indsætter kompetencelister på alle brugere i brugerlisten
    private async Task<List<Bruger>> HentKompetencer(List<Bruger> brugerListe)
    {
        foreach (var bruger in brugerListe)
        {
            bruger.Kompetencer = await Http.GetFromJsonAsync<List<Kompetence>>($"Kompetence/brugerIDkompetence?bruger_id={bruger.Bruger_Id}");
        }

        return brugerListe;
    }


    // Opdaterer den valgte bruger med nye ændringer (eksempelvis rolle / team) og opdaterer listerne på siden
    private async Task OpdaterBruger(Bruger bruger)
    {
        bruger.Kode = "placeholder";

        await Http.PutAsJsonAsync<Bruger>("Bruger/opdaterFrivillig", bruger);

        koordinatorListe = brugerListe.FindAll(q => q.Rolle_Id == 1).OrderBy(q => q.Team).ToList();

        // Sørger for at frivilliglisten stadig er sorteret efter valgte kompetencer
        List<Bruger> nyListe = new List<Bruger>();

        frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

        foreach (var valgteKompetence in valgteKompetencer.ToList())
        {
            foreach (var user in frivilligListe.ToList())
            {
                if (user.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                {
                    nyListe.Add(user);
                }
            }

            frivilligListe = nyListe;

            nyListe = new List<Bruger>();
        }
    }
}
