@page "/koordinatorStartside"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger LogedInBruger


@if (vagtListe == null)
{
    <p><em>Loading...</em></p>
}
else if (!LogedInBruger.ErKoordinator() && !LogedInBruger.ErFormand())
{
    <p><em>Du skal være koordinator for at se denne side</em></p>
}
else if (LogedInBruger.ErLoggetPå())
{
    <h1>Hej @LogedInBruger.Fornavn!</h1>
    <h2>Her er en liste over alle opgaver og deres tilhørende vagter</h2>

    <p>Sorter efter: </p>
    <select class="form-select" @bind="sorteringsValg">
        <option selected>Status</option>
        <option>Flest ledige vagter</option>
        <option>Ansvarlige team</option>
    </select>

    @foreach (var opgave in opgaveListe)
    {
        <div class="table-responsive rounded mb-3">
            <div class="accordion" id="accordionPanelsStayOpenExample">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="panelsStayOpen-heading-@opgave.Opgave_Id">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-@opgave.Opgave_Id" aria-expanded="false" aria-controls="panelsStayOpen-@opgave.Opgave_Id">
                            <table class="table">
                                <thead>
                                    <tr class="table">
                                        <th class="col-3">Opgave: @opgave.Navn</th>
                                        <th class="col-1">@FindAntalVagter(opgave.Opgave_Id, FindVagtOpgave(opgave, vagtListe))</th>
                                        <th class="col-2">
                                            <select class="form-control" @bind-value="opgave.Status" @onchange="() => OpdaterStatus(opgave)" @bind-value:event="oninput">
                                                @foreach (var status in status)
                                                {
                                                    <option value=@status selected=@(opgave.Status == status)>@status</option>

                                                }
                                            </select>
                                        </th>
                                        <th>
                                            <input type="button" class="btn btn-danger" value="Slet opgave" @onclick="() => SletOpgave(opgave)">
                                        </th>
                                        <th class="col-3">Ansvarlig team: @opgave.Team</th>
                                    </tr>
                                </thead>
                            </table>
                        </button>
                    </h2>
                    <div id="panelsStayOpen-@opgave.Opgave_Id" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-heading-@opgave.Opgave_Id">
                        <div class="accordion-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr class="table">
                                        <th>Slet</th>
                                        <th>Opdater</th>
                                        <th>Vagt ID</th>
                                        <th>Start</th>
                                        <th>Slut</th>
                                        <th>Taget af</th>
                                        <th>Opgave navn</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var vagt in FindVagtOpgave(opgave, vagtListe))
                                    {
                                        <tr>
                                            <td><input type="button" class="btn btn-danger" value="Slet" @onclick="() => SletVagt(vagt)"></td>
                                            @if (editMode == false)
                                            {
                                                <td><input type="button" class="btn btn-primary" value="Opdater" @onclick="() => editMode = true"></td>
                                                <td>@vagt.Vagt_Id</td>
                                                <td>@vagt.Start</td>
                                                <td>@vagt.Slut</td>
                                                <td>@vagt.Taget_Af</td>
                                                <td>@vagt.Opgave</td>
                                            }
                                            else if (editMode == true)
                                            {
                                                <td><input type="button" class="btn btn-primary" value="Gem" @onclick="() => OpdaterVagt(vagt)"></td>
                                                <td>@vagt.Vagt_Id</td>
                                                <td> <input type="text" class="form-control" @bind="vagt.Start"></td>
                                                <td> <input type="text" class="form-control" @bind="vagt.Slut"></td>
                                                <td>@vagt.Taget_Af</td>
                                                <td>@vagt.Opgave</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <p><em>Du skal være logget på for at kunne se denne side!</em></p>
}



@code {
    private List<Vagt> vagtListe;
    private List<Vagt> vagtListeUnsorted;
    private List<Opgave> opgaveListe;
    private List<Opgave> opgaveListeUnsorted;
    private List<string> status;
    private string sorteringsInput;

    private bool editMode = false;
    private bool visVagter = false;

    protected override async Task OnInitializedAsync()
    {
        vagtListeUnsorted = await Http.GetFromJsonAsync<List<Vagt>>("Vagt/all");

        vagtListe = vagtListeUnsorted.OrderBy(q => q.Opgave_Id).ToList();

        opgaveListeUnsorted = await Http.GetFromJsonAsync<List<Opgave>>("Opgave/all");

        opgaveListe = opgaveListeUnsorted.OrderBy(q => q.Status).ToList();

        status = await Http.GetFromJsonAsync<List<string>>("Status/all");


    }

    // Sorterer i opgaverne. Opretter først en constructor og så en funktion der sorterer
    public string sorteringsValg
    {
        get
        {
            return sorteringsInput;
        }
        set
        {
            sorteringsInput = value;
            SorterOpgaver();
        }
    }

    protected void SorterOpgaver()
    {
        if (sorteringsInput == "Status")
        {
            opgaveListe = opgaveListe.OrderBy(q => q.Status).ToList();
        }
        else if (sorteringsInput == "Flest ledige vagter")
        {
            foreach (var opgave in opgaveListe)
            {
                List<Vagt> opgaveVagter = FindVagtOpgave(opgave, vagtListe);

                opgave.LedigeVagter = opgaveVagter.FindAll(q => q.Bruger_Id == null).Count();

            }
            opgaveListe = opgaveListe.OrderByDescending(q => q.LedigeVagter).ToList();
        }
        else if (sorteringsInput == "Ansvarlige team")
        {
            opgaveListe = opgaveListe.OrderBy(q => q.Team).ToList();

        }
    }

    // Finder vagter der tilhører en specifik opgave
    protected List<Vagt> FindVagtOpgave(Opgave opgave, List<Vagt> vagtliste)
    {
        List<Vagt> vagtListe = new List<Vagt>();

        vagtListe = vagtliste.FindAll(q => q.Opgave_Id == opgave.Opgave_Id).OrderBy(q => q.Vagt_Id).ToList();

        return vagtListe;
    }


    // Finder antal vagter pr. opgave
    protected string FindAntalVagter(int opgave_id, List<Vagt> vagtListe)
    {
        int antalVagter = vagtListe.Count(q => q.Opgave_Id == opgave_id);
        int antalLedigeVagter = vagtListe.FindAll(q => q.Bruger_Id == null).Count();

        if (antalVagter == 0)
        {
            return "0 vagter i alt";
        }
        else if (antalVagter == 1 && antalLedigeVagter == 1)
        {
            return "1 / 1 vagter ledig";
        }
        else if (antalVagter == 1 && antalLedigeVagter == 0)
        {
            return "1 / 1 vagt dækket";
        }
        else if (antalVagter > 1 && antalLedigeVagter > 0)
        {
            return $"{antalLedigeVagter} / {antalVagter} vagter ledige";
        }
        else
        {
            return $"{antalVagter} / {antalVagter} vagter dækket";
        }


    }
    // Sletter opgave fra databasen
    protected async Task SletOpgave(Opgave opgave)
    {
        await Http.PostAsJsonAsync<Opgave>("Opgave/slet", opgave);

        await OnInitializedAsync();
    }


    // Sletter vagt fra databasen
    protected async Task SletVagt(Vagt vagt)
    {
        await Http.PostAsJsonAsync<Vagt>("Vagt/sletVagt", vagt);

        await OnInitializedAsync();
    }


    // Opdaterer vagt fra databasen
    protected async Task OpdaterVagt(Vagt vagt)
    {
        await Http.PostAsJsonAsync<Vagt>("Vagt/opdaterVagt", vagt);

        await OnInitializedAsync();

        editMode = false;

    }

    // Opdaterer status på opgave
    protected async Task OpdaterStatus(Opgave opgave)
    {
        await Http.PostAsJsonAsync<Opgave>("Opgave/opdaterOpgave", opgave);

        await OnInitializedAsync();

        editMode = false;
    }
}
