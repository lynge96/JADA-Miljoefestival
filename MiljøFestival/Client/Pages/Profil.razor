@page "/profil"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger LogedInBruger


@if (bruger == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (LogedInBruger.ErLoggetPå())
{
    <div class="row col-md-6 mx-auto bg-body rounded shadow-sm">
        <div class="profilContainer col-md-6">
            <h2 class="my-3">Profiloplysninger</h2>
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="floatingFornavn" @bind="bruger.Fornavn" placeholder="text">
                <label for="floatingFornavn">Fornavn</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="floatingEfternavn" @bind="bruger.Efternavn" placeholder="text">
                <label for="floatingEfternavn">Efternavn</label>
            </div>

            <div class="form-floating mb-3">
                <input type="tel" class="form-control" id="floatingTelefon" @bind="bruger.Telefon" placeholder="text">
                <label for="floatingTelefon">Telefon</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="floatingInput" @bind="bruger.Adresse" placeholder="text">
                <label for="floatingInput">Adresse</label>
            </div>

            <div class="form-floating mb-3">
                <input type="email" class="form-control" id="floatingInput" @bind="bruger.Email" placeholder="text">
                <label for="floatingInput">Email adresse</label>
            </div>
            <div class="my-3">
                <button class="btn btn-primary" type="button" @onclick="() => OpdaterBruger(bruger)">Gem ændringer</button>
            </div>
        </div>
        
        <div class="kompetenceContainer col-md-6">
            <h2 class="my-3">Kompetencer</h2>
            @foreach (var kompetence in valgteKompetencer)
            {
                <div class="form-check mb-3">
                    @if (kompetence.IsChecked == true)
                    {
                        <input type="checkbox" class="form-check-input" id="defaultCheck" @onchange="eventArgs => { CheckboxClicked(kompetence, eventArgs.Value); }" checked />
                        <label class="form-check-label" for="defaultcheck">@kompetence.Kompetence_Navn</label>
                    }
                    else
                    {
                        <input type="checkbox" class="form-check-input" @onchange="eventArgs => { CheckboxClicked(kompetence, eventArgs.Value); }" />
                        <label class="form-check-label" for="defaultcheck">@kompetence.Kompetence_Navn</label>
                    }
                </div>
            }
            <div>
                <button class="btn btn-primary" @onclick="() => OpdaterKompetencer(valgteKompetencer)">Opdater kompetencer</button>
            </div>
        </div>

        <div class="passwordContainer col-md-6 my-4">
            <h2 class="my-3">Ændre Password</h2>
            <div class="form-floating mb-3">
                <input type="password" class="form-control" id="floatingPassword" @bind="bruger.Kode">
                <label for="floatingPassword">Password</label>
            </div>
            <div>
                <button class="btn btn-outline-primary" type="button" @onclick="() => OpdaterPassword(bruger)">Opdater password</button>
            </div>
        </div>

    </div>

}
else
{
    <div class="alert alert-info col-md-3 mx-auto">
        <span class="oi oi-account-login" aria-hidden="true"></span>
        <strong> Hov!</strong> <a href="/login">Log in</a> for at se og redigere din profil!
    </div>

}

@code {
    private Bruger bruger = new Bruger();
    private List<string> teams = new List<string>();
    private List<Kompetence> alleKompetencer = new List<Kompetence>();
    public List<Kompetence> valgteKompetencer = new List<Kompetence>();

    protected override async Task OnInitializedAsync()
    {
        if (LogedInBruger.Bruger_Id != 0)
        {
            var brugerListe = await Http.GetFromJsonAsync<IEnumerable<Bruger>>($"Bruger/findBrugerId?bruger_id={LogedInBruger.Bruger_Id}");

            bruger = brugerListe.First();

            teams = await Http.GetFromJsonAsync<List<string>>("Team/all");
            alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");
            valgteKompetencer = await HentKompetencer(alleKompetencer);
        }
    }

    // Henter en liste over alle de komptencer, som man har valgt ved oprettelse og samtidigt dem man ikke har
    protected async Task<List<Kompetence>> HentKompetencer(List<Kompetence> kompetenceListe)
    {
        List<Kompetence> valgteKompetencer = new List<Kompetence>();

        foreach (var kompetence in kompetenceListe)
        {
            var kompetencer = await Http.GetFromJsonAsync<IEnumerable<Kompetence>>($"Kompetence/brugerkompetence?bruger_id={LogedInBruger.Bruger_Id}&kompetence_id={kompetence.Kompetence_Id}");

            valgteKompetencer.Add(kompetencer.First());
        }

        return valgteKompetencer;
    }


    // Gemmer ændringer i kompetencevalg
    void CheckboxClicked(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            kompetence.IsChecked = true;
        }
        else
        {
            kompetence.IsChecked = false;
        }
    }


    // Opdaterer valget af kompetencer
    protected async Task OpdaterKompetencer(List<Kompetence> kompetenceListe)
    {
        // Sender listen af nuværende valgte kompetencer til controlleren
        await Http.PostAsJsonAsync<List<Kompetence>>("Kompetence/opdater", kompetenceListe);
    }


    protected async Task OpdaterBruger(Bruger bruger)
    {
        // Opdater nuværende bruger
        LogedInBruger.Bruger_Id = bruger.Bruger_Id;
        LogedInBruger.Fornavn = bruger.Fornavn;
        LogedInBruger.Efternavn = bruger.Efternavn;
        LogedInBruger.Telefon = bruger.Telefon;
        LogedInBruger.Email = bruger.Email;
        LogedInBruger.Adresse = bruger.Adresse;
        LogedInBruger.Team_Id = bruger.Team_Id;
        LogedInBruger.Team = bruger.Team;

        await Http.PostAsJsonAsync<Bruger>("Bruger/opdater", bruger);

        await OnInitializedAsync();
    }

    private async Task OpdaterPassword(Bruger bruger)
    {
        await Http.PostAsJsonAsync<Bruger>("Bruger/opdaterPassword", bruger);

        await OnInitializedAsync();

    }
}
