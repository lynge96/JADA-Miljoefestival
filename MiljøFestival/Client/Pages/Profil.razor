@page "/profil"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger loggedInBruger
@inject NavigationManager NavManager

@if (loggedInBruger.ErLoggetPå())
{
    <main class="row col-md-6 mx-auto">
        @*Profiloplysninger*@
        <div class="profilContainer col-md-6 was-validated px-4">
            <h2 class="my-3">Profiloplysninger</h2>

            <div class="form-floating mb-4">
                <input type="text" class="form-control" id="floatingFornavn" @bind="loggedInBruger.Fornavn" placeholder="text" required>
                <label for="floatingFornavn">Fornavn</label>
            </div>

            <div class="form-floating mb-4">
                <input type="text" class="form-control" id="floatingEfternavn" @bind="loggedInBruger.Efternavn" placeholder="text" required>
                <label for="floatingEfternavn">Efternavn</label>
            </div>

            <div class="form-floating mb-4">
                <input type="tel" class="form-control" id="floatingTelefon" @bind="loggedInBruger.Telefon" placeholder="text" required>
                <label for="floatingTelefon">Telefon</label>
            </div>

            <div class="form-floating mb-4">
                <input type="text" class="form-control" id="floatingInput" @bind="loggedInBruger.Adresse" placeholder="text" required>
                <label for="floatingInput">Adresse</label>
            </div>

            <div class="form-floating mb-4">
                <input type="email" class="form-control" id="floatingInput" @bind="loggedInBruger.Email" placeholder="text" required>
                <label for="floatingInput">Email adresse</label>
            </div>

            @* Opdaterer brugerens med profil *@
            <div class="mt-3">
                <button class="btn btn-success" type="button" @onclick="() => OpdaterBruger()">Gem ændringer</button>
            </div>

            @* Gider feedback, hvis ændringerne bliver succesfuldt gemt *@
            @if (brugerÆndring == true)
            {
                <div class="alert alert-success col-md-9 mt-4">
                    <span class="bi bi-check-circle-fill" aria-hidden="true"></span>
                    <strong> Succes!</strong> Dine oplysninger er ændret!
                </div>
            }
        </div>
        @*Kompetencer og password*@
        <div class="kompetenceContainer col-md-6 px-4">
            <h2 class="my-3">Kompetencer</h2>
            @* Henter in liste over alle kompetencer, og checker dem af, som brugeren har valgt tidligere *@
            @foreach (var kompetence in loggedInBruger.Kompetencer)
            {
                <div class="form-check mb-3">
                    @if (kompetence.IsChecked == true)
                    {
                        <input type="checkbox" class="form-check-input" id="defaultCheck1" @onchange="eventArgs => { CheckboxClicked(kompetence, eventArgs.Value); }" checked />
                        <label class="form-check-label" for="defaultCheck1">@kompetence.Kompetence_Navn</label>
                        <br />
                    }
                    else
                    {
                        <input type="checkbox" class="form-check-input" id="defaultCheck2" @onchange="eventArgs => { CheckboxClicked(kompetence, eventArgs.Value); }" />
                        <label class="form-check-label" for="defaultCheck2">@kompetence.Kompetence_Navn</label>
                        <br />
                    }
                </div>
            }
            @* Gør det muligt for brugeren at ændre kodeord *@
            <h2 class="mt-3">Ændre Password</h2>

            <div class="form-floating mt-2">
                <input type="password" class="form-control" id="floatingPassword" @bind="loggedInBruger.Kode">
                <label for="floatingPassword">Password</label>
            </div>

            <div class="mt-4">
                <button class="btn btn-outline-success" type="button" @onclick="() => OpdaterPassword()">Opdater password</button>
            </div>

            @* Giver feedback, hvis ændringen bliver godkendt *@
            @if (passwordÆndring == true)
            {
                <div class="alert alert-success col-md-9 my-3">
                    <span class="bi bi-check-circle-fill" aria-hidden="true"></span>
                    <strong> Succes!</strong> Dit password er ændret!
                </div>
            }
        </div>
        @*Slet profil*@
        <div class="passwordContainer col-md-6 px-4">
            <div class="my-5">
                <button type="button" class="btn btn-danger" @onclick="() => SletProfil()">Slet profil</button>
            </div>
        </div>
    </main>

}
else
{
    <div class="alert alert-info col-md-3 mx-auto">
        <span class="bi bi-door-open-fill" aria-hidden="true"></span>
        <strong> Hov!</strong> <a href="/login">Log in</a> for at se og redigere din profil!
    </div>
}

@code {
    private bool passwordÆndring = false;
    private bool brugerÆndring = false;

    // Gemmer ændringer i kompetencevalg
    private void CheckboxClicked(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            kompetence.IsChecked = true;
        }
        else
        {
            kompetence.IsChecked = false;
        }
    }

    // Sender de indtastede informationer, opdaterer kompetencevalget og herefter brugeren. 
    // Til sidst aktiveres feedbacken
    private async Task OpdaterBruger()
    {
        await OpdaterKompetencer(loggedInBruger.Kompetencer);

        await Http.PutAsJsonAsync<Bruger>("Bruger/opdater", loggedInBruger);

        brugerÆndring = true;
    }
    

    // Opdaterer valget af kompetencer
    private async Task OpdaterKompetencer(List<Kompetence> kompetenceListe)
    {
        // Sender listen af nuværende valgte kompetencer til controlleren
        await Http.PutAsJsonAsync<List<Kompetence>>("Kompetence/opdater", kompetenceListe);
    }


    // Sender det nye password til databasen, og aktiverer godkendt feedback
    private async Task OpdaterPassword()
    {
        await Http.PutAsJsonAsync<Bruger>("Bruger/opdaterPassword", loggedInBruger);

        passwordÆndring = true;
    }

    // Sletter brugerens profil og logger af, så man starter forfra
    private async Task SletProfil()
    {
        loggedInBruger.Kode = "placeholder";

        await Http.PutAsJsonAsync<Bruger>("Bruger/sletProfil", loggedInBruger);

        LogAf();
    }

    // Fjerner alt tilknyttet på den bruger som tidligere var logget ind,
    // og videresender brugeren til index.html. 
    private void LogAf()
    {
        loggedInBruger.Bruger_Id = 0;
        loggedInBruger.Fornavn = string.Empty;
        loggedInBruger.Efternavn = string.Empty;
        loggedInBruger.Telefon = string.Empty;
        loggedInBruger.Email = string.Empty;
        loggedInBruger.Adresse = string.Empty;
        loggedInBruger.Team = string.Empty;
        loggedInBruger.Team_Id = 0;
        loggedInBruger.Rolle_Id = 0;
        loggedInBruger.Rolle = string.Empty;
        loggedInBruger.Kode = string.Empty;
        loggedInBruger.Kompetencer.Clear();

        NavManager.NavigateTo("/");
    }
}
