@page "/koordinatorfrivillige"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger loggedInBruger

<h1>Overblik over alle brugere</h1>

@if (brugerListeUnsorted == null)
{
    <p><em>Loading...</em></p>
}
else if (!loggedInBruger.ErKoordinator())
{
    <p><em>Du skal være koordinator for at se denne side</em></p>
}
else if (loggedInBruger.ErLoggetPå())
{
    <h1>Formand</h1>
    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead>
                <tr class="table">
                    <th>Navn</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in formandListe)
                {
                    <tr>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Email</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h1>Frivillige</h1>
    <table>
        <thead>
            <tr class="table">
                <td>Sorter efter:</td>
                @foreach (var kompetence in alleKompetencer)
                {
                    <td>
                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="eventArgs => { CheckboxKompetencer(kompetence, eventArgs.Value); }">
                        @kompetence.Kompetence_Navn
                    </td>
                }
            </tr>
        </thead>
    </table>
    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead>
                <tr class="table">
                    <th>Bruger ID</th>
                    <th>Navn</th>
                    <th>Telefon</th>
                    <th>Email</th>
                    <th>Adresse</th>
                    <th>Team</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in frivilligListe)
                {
                    <tr>
                        <td>@bruger.Bruger_Id</td>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Telefon</td>
                        <td>@bruger.Email</td>
                        <td>@bruger.Adresse</td>
                        <td>
                            <select class="form-control" @bind-value="bruger.Team" @onchange="() => OpdaterBruger(bruger)" @bind-value:event="oninput">
                                @foreach (var team in teams)
                                {
                                    <option value="@team" selected=@(bruger.Team == team)>@team</option>
                                }
                            </select>
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h1>Koordinatorer</h1>
    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead>
                <tr class="table">
                    <th>Bruger ID</th>
                    <th>Navn</th>
                    <th>Telefon</th>
                    <th>Email</th>
                    <th>Adresse</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in koordinatorListe)
                {
                    <tr>
                        <td>@bruger.Bruger_Id</td>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Telefon</td>
                        <td>@bruger.Email</td>
                        <td>@bruger.Adresse</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Bruger> frivilligListe;
    private List<Bruger> koordinatorListe;
    private List<Bruger> brugerListeUnsorted;
    private List<Bruger> brugerListe;

    private List<Bruger> formandListe;
    private List<string> teams = new List<string>();
    private List<string> valgteKompetencer = new List<string>();
    private List<Kompetence> alleKompetencer = new List<Kompetence>();




    protected override async Task OnInitializedAsync()
    {
        brugerListeUnsorted = await Http.GetFromJsonAsync<List<Bruger>>("Bruger/all");
        brugerListe = await HentKompetencer(brugerListeUnsorted);

        frivilligListe = brugerListeUnsorted.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();
        koordinatorListe = brugerListeUnsorted.FindAll(q => q.Rolle_Id == 1);
        formandListe = brugerListeUnsorted.FindAll(q => q.Rolle_Id == 3);
        teams = await Http.GetFromJsonAsync<List<string>>("Team/all");
        alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");

    }

    // Sorterer frivillige efter valgte kompetencer (til jacob: kig på opdaterbruger hvad den gør med sort)
    protected void CheckboxKompetencer(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            List<Bruger> nyListe = new List<Bruger>();

            valgteKompetencer.Add(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }
                frivilligListe = nyListe;
                nyListe = new List<Bruger>();
            }
        }
        else
        {
            List<Bruger> nyListe = new();

            valgteKompetencer.Remove(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }
                frivilligListe = nyListe;
                nyListe = new List<Bruger>(); ;
            }
        }
    }


    // Indsætter kompetencer på alle brugere
    protected async Task<List<Bruger>> HentKompetencer(List<Bruger> brugerListe)
    {
        foreach (var bruger in brugerListe)
        {
            bruger.Kompetencer = await Http.GetFromJsonAsync<List<Kompetence>>($"Kompetence/brugerIDkompetence?bruger_id={bruger.Bruger_Id}");
        }

        return brugerListe;
    }


    protected async Task OpdaterBruger(Bruger bruger)
    {
        await Http.PutAsJsonAsync<Bruger>("Bruger/opdaterFrivillig", bruger);

        await OnInitializedAsync();
    }
}