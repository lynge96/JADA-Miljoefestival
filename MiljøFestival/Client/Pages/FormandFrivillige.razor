@page "/formandfrivillige"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger loggedInBruger

@if (brugerListeUnsorted == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!loggedInBruger.ErFormand())
{
    <div class="alert alert-info col-md-3 mx-auto">
        <span class="bi bi-door-open-fill" aria-hidden="true"></span>
        <strong> Hov!</strong> Du skal være logget på en formand bruger for at se denne side.
    </div>
}
else if (loggedInBruger.ErFormand())
{
<main class="col-md-8 mx-auto">

    <h1 class="display-4">Liste over alle frivillige</h1>

    <h2 class="mt-3">Frivillige</h2>

    <div class="flex-md-wrap mt-3">
        <p class="lead">Sorter efter kompetencer:</p>
        @foreach (var kompetence in alleKompetencer)
        {
            <div class="form-check form-check-inline mb-2">
                <input type="checkbox" class="form-check-input" id="defaultCheck" @onchange="eventArgs => { CheckboxKompetencer(kompetence, eventArgs.Value); }">
                <label class="form-check-label" for="defaultCheck">@kompetence.Kompetence_Navn</label>
            </div>
        }
    </div>

    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Navn</th>
                    <th>Telefon</th>
                    <th>Email</th>
                    <th>Adresse</th>
                    <th>Team</th>
                    <th>Koordinator?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in frivilligListe)
                {
                    <tr>
                        <th>@bruger.Bruger_Id</th>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Telefon</td>
                        <td>@bruger.Email</td>
                        <td>@bruger.Adresse</td>
                        <td>
                            <select class="form-select" @bind-value="bruger.Team" @onchange="() => OpdaterBruger(bruger)" @bind-value:event="oninput">
                                @foreach (var team in teams)
                                {
                                    <option value="@team" selected=@(bruger.Team == team)>@team</option>
                                }
                            </select>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                @if (!bruger.ErKoordinator())
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }" checked>

                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <h2 class="mt-3">Koordinatorer</h2>

    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Navn</th>
                    <th>Telefon</th>
                    <th>Email</th>
                    <th>Adresse</th>
                    <th>Koordinator?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in koordinatorListe)
                {
                    <tr>
                        <th>@bruger.Bruger_Id</th>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Telefon</td>
                        <td>@bruger.Email</td>
                        <td>@bruger.Adresse</td>
                        <td>
                            <div class="form-check form-switch">
                                @if (bruger.ErKoordinator())
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }">
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</main>

}


@code {
    private List<Bruger> frivilligListe;
    private List<Bruger> koordinatorListe;
    private List<Bruger> formandListe;
    private List<Bruger> brugerListeUnsorted;
    private List<Bruger> brugerListe;
    private List<Kompetence> alleKompetencer = new List<Kompetence>();
    private List<string> teams = new List<string>();
    private List<string> valgteKompetencer = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        brugerListeUnsorted = await Http.GetFromJsonAsync<List<Bruger>>("Bruger/all");

        brugerListe = await HentKompetencer(brugerListeUnsorted);

        frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

        koordinatorListe = brugerListe.FindAll(q => q.Rolle_Id == 1).OrderBy(q => q.Fornavn).ToList();

        formandListe = brugerListe.FindAll(q => q.Rolle_Id == 3);

        teams = await Http.GetFromJsonAsync<List<string>>("Team/all");

        alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");
    }

    // Gemmer ændringer som koordinator
    private async Task CheckboxClicked(Bruger bruger, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            bruger.Rolle_Id = 1;

            bruger.Rolle = "Koordinator";

            await OpdaterBruger(bruger);
        }
        else
        {
            bruger.Rolle_Id = 2;

            bruger.Rolle = "Frivillig";

            await OpdaterBruger(bruger);
        }
    }

    // Sorterer frivillige efter valgte kompetencer (til jacob: kig på opdaterbruger hvad den gør med sort)
    private void CheckboxKompetencer(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            List<Bruger> nyListe = new List<Bruger>();

            valgteKompetencer.Add(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }

                frivilligListe = nyListe;

                nyListe = new List<Bruger>();
            }
        }
        else
        {
            List<Bruger> nyListe = new();

            valgteKompetencer.Remove(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }

                frivilligListe = nyListe;

                nyListe = new List<Bruger>();
            }
        }
    }


    // Indsætter kompetencer på alle brugere
    private async Task<List<Bruger>> HentKompetencer(List<Bruger> brugerListe)
    {
        foreach (var bruger in brugerListe)
        {
            bruger.Kompetencer = await Http.GetFromJsonAsync<List<Kompetence>>($"Kompetence/brugerIDkompetence?bruger_id={bruger.Bruger_Id}");
        }

        return brugerListe;
    }

    private async Task OpdaterBruger(Bruger bruger)
    {
        bruger.Kode = "placeholder";

        await Http.PutAsJsonAsync<Bruger>("Bruger/opdaterFrivillig", bruger);

        frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

        koordinatorListe = brugerListe.FindAll(q => q.Rolle_Id == 1).OrderBy(q => q.Fornavn).ToList();
    }
}
