@page "/formandfrivillige"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger LogedInBruger

<h1>Overblik over alle brugere</h1>

@if (brugerListeUnsorted == null)
{
    <p><em>Loading...</em></p>
}
else if (!LogedInBruger.ErFormand())
{
    <p><em>Du skal være koordinator for at se denne side</em></p>
}
else if (LogedInBruger.ErLoggetPå())
{
    <h1>Formand</h1>
    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead>
                <tr class="table">
                    <th>Navn</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in formandListe)
                {
                    <tr>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Email</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h1>Frivillige</h1>
        <table>
            <thead>
                <tr class="table">
                    <td>Sorter efter:</td>
                    @foreach (var kompetence in alleKompetencer)
                    {
                        <td>
                            <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="eventArgs => { CheckboxKompetencer(kompetence, eventArgs.Value); }">
                            @kompetence.Kompetence_Navn
                        </td>
                    }
                </tr>
            </thead>
        </table>
    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead>
                <tr class="table">
                    <th>ID</th>
                    <th>Navn</th>
                    <th>Telefon</th>
                    <th>Email</th>
                    <th>Adresse</th>
                    <th>Team</th>
                    <th>Koordinator?</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in frivilligListeSorteret)
                {
                    <tr>
                        <td>@bruger.Bruger_Id</td>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Telefon</td>
                        <td>@bruger.Email</td>
                        <td>@bruger.Adresse</td>
                        <td>
                            <select class="form-control" @bind-value="bruger.Team" @onchange="() => OpdaterBruger(bruger)" @bind-value:event="oninput">
                                @foreach (var team in teams)
                                {
                                    <option value="@team" selected=@(bruger.Team == team)>@team</option>
                                }
                            </select>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                @if (!bruger.ErKoordinator())
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }" checked>

                                }
                            </div>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h1>Koordinatorer</h1>
    <div class="table-responsive rounded">
        <table class="table table-striped">
            <thead>
                <tr class="table">
                    <th>ID</th>
                    <th>Navn</th>
                    <th>Telefon</th>
                    <th>Email</th>
                    <th>Adresse</th>
                    <th>Koordinator?</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var bruger in koordinatorListe)
                {
                    <tr>
                        <td>@bruger.Bruger_Id</td>
                        <td>@bruger.Fornavn @bruger.Efternavn</td>
                        <td>@bruger.Telefon</td>
                        <td>@bruger.Email</td>
                        <td>@bruger.Adresse</td>
                        <td>
                            <div class="form-check form-switch">
                                @if (bruger.ErKoordinator())
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }" checked>
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="async eventArgs => { await CheckboxClicked(bruger, eventArgs.Value); }">

                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Bruger> frivilligListe;
    private List<Bruger> frivilligListeSorteret;

    private List<Bruger> koordinatorListe;
    private List<Bruger> formandListe;
    private List<Bruger> brugerListeUnsorted;
    private List<Bruger> brugerListe;
    private List<Kompetence> alleKompetencer = new List<Kompetence>();
    private List<string> teams = new List<string>();
    private List<string> valgteKompetencer = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        brugerListeUnsorted = await Http.GetFromJsonAsync<List<Bruger>>("Bruger/all");
        brugerListe = await HentKompetencer(brugerListeUnsorted);

        frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();
        frivilligListeSorteret = frivilligListe;

        koordinatorListe = brugerListe.FindAll(q => q.Rolle_Id == 1).OrderBy(q => q.Fornavn).ToList();
        formandListe = brugerListe.FindAll(q => q.Rolle_Id == 3);
        teams = await Http.GetFromJsonAsync<List<string>>("Team/all");
        alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");
    }

    // Gemmer ændringer som koordinator
    protected async Task CheckboxClicked(Bruger bruger, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            bruger.Rolle_Id = 1;
            bruger.Rolle = "Koordinator";
            await OpdaterBruger(bruger);
        }
        else
        {
            bruger.Rolle_Id = 2;
            bruger.Rolle = "Frivillig";
            await OpdaterBruger(bruger);
        }
    }

    // Sorterer frivillige efter valgte kompetencer
    protected void CheckboxKompetencer(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            List<Bruger> nyFrivilligListe = new();
            valgteKompetencer.Add(kompetence.Kompetence_Navn);

            foreach(var bruger in frivilligListe)
            {
                foreach (var valgteKompetence in valgteKompetencer)
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyFrivilligListe.Add(bruger);
                    }
                }
            }

            frivilligListeSorteret = nyFrivilligListe;
        }
        else
        {
            List<Bruger> nyFrivilligListe = new();
            valgteKompetencer.Remove(kompetence.Kompetence_Navn);

            foreach (var bruger in frivilligListe)
            {
                foreach (var valgteKompetence in valgteKompetencer)
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyFrivilligListe.Add(bruger);
                    }
            }


        }
    }


    // Indsætter kompetencer på alle brugere
    protected async Task<List<Bruger>> HentKompetencer(List<Bruger> brugerListe)
    {
        foreach (var bruger in brugerListe)
        {
            bruger.Kompetencer = await Http.GetFromJsonAsync<List<Kompetence>>($"Kompetence/brugerIDkompetence?bruger_id={bruger.Bruger_Id}");
        }

        return brugerListe;
    }


    protected async Task OpdaterBruger(Bruger bruger)
    {
        await Http.PostAsJsonAsync<Bruger>("Bruger/opdaterFrivillig", bruger);

        await OnInitializedAsync();
    }


}
