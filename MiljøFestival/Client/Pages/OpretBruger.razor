@page "/opretBruger"
@using MiljøFestival.Shared.Models
@inject NavigationManager NavManager
@inject HttpClient Http


<main class="opretBrugerContainer mx-auto col-md-6 row">
    @*Opret Bruger EditForm. Binder alle indtastede felter til et objekt af klassen bruger*@
    <div class="col-md-6">
        <h2 class="my-3">Opret en bruger</h2>

        <EditForm Model="@BrugerModel" class="row g-2" OnValidSubmit="() => OpretUser(alleKompetencer)">
            <DataAnnotationsValidator />

            <div class="form-floating col-md-6 mb-4">
                <InputText id="fornavn" @bind-Value="BrugerModel.Fornavn" class="form-control" placeholder="Fornavn" />
                <label for="fornavn">Fornavn</label>
                <ValidationMessage For="@(() => BrugerModel.Fornavn)" />
            </div>

            <div class="form-floating col-md-6 mb-4">
                <InputText id="efternavn" @bind-Value="BrugerModel.Efternavn" class="form-control" placeholder="Efternavn" />
                <label for="efternavn">Efternavn</label>
                <ValidationMessage For="@(() => BrugerModel.Efternavn)" />
            </div>

            <div class="form-floating col-md-6 mb-4">
                <InputText type="password" id="password" @bind-Value="BrugerModel.Kode" class="form-control" placeholder="Password" />
                <label for="password">Password</label>
                <ValidationMessage For="@(() => BrugerModel.Kode)" />
            </div>

            <div class="form-floating col-md-6 mb-4">
                <InputText id="email" @bind-Value="BrugerModel.Email" class="form-control" placeholder="Email" />
                <label for="email">Email adresse</label>
                <ValidationMessage For="@(() => BrugerModel.Email)" />
            </div>

            <div class="form-floating col-md-6 mb-4">
                <InputText id="telefon" @bind-Value="BrugerModel.Telefon" class="form-control" placeholder="Telefon" />
                <label for="telefon">Telefon</label>
                <ValidationMessage For="@(() => BrugerModel.Telefon)" />
            </div>

            <div class="form-floating col-md-6 mb-4">
                <InputText id="adresse" @bind-Value="BrugerModel.Adresse" class="form-control" placeholder="Adresse" />
                <label for="adresse">Adresse</label>
                <ValidationMessage For="@(() => BrugerModel.Adresse)" />
            </div>

            <div class="col-md-12 mb-5">
                <InputSelect id="team" @bind-Value="BrugerModel.Team" class="form-select" placeholder="Team">
                    <label for="team">Team</label>
                    @* Henter en liste af alle teams, og lader brugeren selv vælge hvilket de kunne tænke sig *@
                    <option selected>Vælg et team</option>
                    @foreach (var team in teams)
                    {
                        <option>@team</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => BrugerModel.Team)" />
            </div>
            
            @* Laver en "spinner" animation, mens brugeren bliver oprettet *@
            @if (opretBrugerLoading == false)
            {
                <div class="mx-auto">
                    <button class="btn btn-success" type="submit">Opret Bruger</button>
                </div>
            }
            else if (opretBrugerLoading == true)
            {
                <div class="mx-auto">
                    <button class="btn btn-success" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Loading...
                    </button>
                </div>
            }


        </EditForm>
    </div>
    @*Henter en liste af alle kompetencer, og laver en tjekliste for hver. Herefter kan brugeren dem de evner*@
    <div class="col-md-6 mb-3">
        <h2 class="my-3">Kompetencer</h2>
        @if (alleKompetencer == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            @foreach (var kompetence in alleKompetencer)
            {
                <div class="form-check mb-3">
                    <input type="checkbox" class="form-check-input" id="kompetencer" @onchange="eventArgs => { CheckboxClicked(kompetence, eventArgs.Value); }" />
                    <label class="form-check-label" for="kompetencer">@kompetence.Kompetence_Navn</label>
                </div>
            }
        }
    </div>
</main>

@code {
    private List<string> teams = new List<string>();
    private List<Kompetence> alleKompetencer = new List<Kompetence>();
    private bool opretBrugerLoading = false;
    private Bruger BrugerModel = new Bruger();
    private EditContext EditContext;

    // Henter en liste over alle teams, kompetencer og en ny instant af klassen EditContext, der bruges til validering. 
    // Den bliver herefter bundet op på en ny bruger (BrugerModel)
    protected override async Task OnInitializedAsync()
    {
        teams = await Http.GetFromJsonAsync<List<string>>("team/all");

        alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");

        EditContext = new EditContext(BrugerModel);

    }

    // Opretter en ny bruger i databasen, hvis EditForm valideringen altså er godkendt
    private async Task OpretUser(List<Kompetence> kompetenceListe)
    {
        opretBrugerLoading = true;

        // Sætter brugerens rolle til frivillig, hvilket er vores default
        BrugerModel.Rolle = "Frivillig";

        await Http.PostAsJsonAsync<Bruger>("Bruger/opret", BrugerModel);

        // Henter bruger_id'et for den nyoprettede bruger og kobler herefter brugeren op på kompetencelisten
        int bruger_id = (await Http.GetFromJsonAsync<List<int>>($"Bruger/findBrugerIdMail?email={BrugerModel.Email}")).First();

        foreach (var kompetence in alleKompetencer)
        {
            kompetence.Bruger_Id = bruger_id;
        }

        await Http.PutAsJsonAsync<List<Kompetence>>("Kompetence/opdater", alleKompetencer);

        // Resetter opret-formularen
        BrugerModel = new Bruger();

        await Task.Delay(700);

        // Videresender brugeren til login siden
        NavManager.NavigateTo("/login");
    }

    // Gemmer ændringer i kompetencevalg (om brugeren har check'ed en checkbox eller ej)
    private void CheckboxClicked(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            kompetence.IsChecked = true;
        }
        else
        {
            kompetence.IsChecked = false;
        }
    }
}