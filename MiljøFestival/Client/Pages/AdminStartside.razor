@page "/adminStartside"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger loggedInBruger


@if (vagtListe == null)
{
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (loggedInBruger.ErKoordinator() || loggedInBruger.ErFormand())
{
    <main class="col-md-7 mx-auto">

        <h1 class="display-4 text-center mb-4">Dit dashboard</h1>
        <p class="lead">
            Hej <bold>@loggedInBruger.Fornavn</bold>! Nedenfor kan du se en oversigt over alle opgaver, som er oprettet til festivalen.
            Udvider du opgaven, får du også mulighed for at se alle de vagter, som er tilknyttet den enkelte opgave.
            <br /><br>Yderligere har du mulighed for at opdaterer status for de enkelte vagter samt slette dem.
            <br /><br />
        </p>

        @* Gør det muligt at sortere i alle opgaver efter tre muligheder *@   
        <div class="col-md-2">
            <p class="mb-0">Sorter efter: </p>
            <select class="form-select mb-4 col-md-3" @bind="SorteringsInput">
                <option selected>Status</option>
                <option>Flest ledige vagter</option>
                <option>Ansvarlige team</option>
            </select>
        </div>

       @* Laver en div for hver opgave der findes i databasen. Her kan man ændre status, slette vagten
           se ledige vagter, slette vagter og opdatere dem *@
        @foreach (var opgave in opgaveListe)
        {
            <div class="table-responsive rounded mb-3">
                <div class="accordion" id="accordionExample">
                    <div class="accordion-item mx-auto">
                        <h2 class="accordion-header mx-auto" id="panelsStayOpen-heading-@opgave.Opgave_Id">
                            <table class="table table-borderless">
                                <thead>
                                    <tr class="d-flex flex-wrap justify-content-around ">
                                        <th class="col-1">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-@opgave.Opgave_Id" aria-expanded="false" aria-controls="panelsStayOpen-@opgave.Opgave_Id"></button>
                                        </th>
                                        <th class="lead col-3">@opgave.Navn</th>
                                        <th class="lead col-2">@FindAntalVagter(opgave.Opgave_Id, FindVagtOpgave(opgave, vagtListe))</th>
                                        <th class="lead col-2">
                                            <select class="form-select" @bind-value="opgave.Status" @onchange="() => OpdaterStatus(opgave)" @bind-value:event="oninput">
                                                @foreach (var status in status)
                                                {
                                                    <option value=@status selected=@(opgave.Status == status)>@status</option>
                                                }
                                            </select>
                                        </th>
                                        <th class="col-2">
                                            <input type="button" class="btn btn-danger" value="Slet opgave" @onclick="() => SletOpgave(opgave)">
                                        </th>
                                        <th class="lead col-2">Team: @opgave.Team</th>
                                    </tr>
                                </thead>
                            </table>

                        </h2>

                        <div id="panelsStayOpen-@opgave.Opgave_Id" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-heading-@opgave.Opgave_Id">
                            <div class="accordion-body">
                                <table class="table table-striped">
                                    <thead>
                                        <tr class="table">
                                            <th>Slet</th>
                                            <th>Opdater</th>
                                            <th>Vagt ID</th>
                                            <th>Start</th>
                                            <th>Slut</th>
                                            <th>Taget af</th>
                                            <th>Opgave navn</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @* Laver en række for hver vagt, hver opgave indeholder *@
                                        @foreach (var vagt in FindVagtOpgave(opgave, vagtListe))
                                        {
                                            <tr>
                                                <td><input type="button" class="btn btn-danger" value="Slet" @onclick="() => SletVagt(vagt)"></td>
                                                @if (editMode == false)
                                                {
                                                    <td><input type="button" class="btn btn-primary" value="Opdater" @onclick="() => editMode = true"></td>
                                                    <td>@vagt.Vagt_Id</td>
                                                    <td>@vagt.Start</td>
                                                    <td>@vagt.Slut</td>
                                                    <td>@vagt.Taget_Af</td>
                                                    <td>@vagt.Opgave</td>
                                                }
                                                else if (editMode == true)
                                                {
                                                    <td><input type="button" class="btn btn-primary" value="Gem" @onclick="() => OpdaterVagt(vagt)"></td>
                                                    <td>@vagt.Vagt_Id</td>
                                                    <td> <input type="text" class="form-control" @bind="vagt.Start"></td>
                                                    <td> <input type="text" class="form-control" @bind="vagt.Slut"></td>
                                                    <td>@vagt.Taget_Af</td>
                                                    <td>@vagt.Opgave</td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        }

    </main>
}
else
{
    <div class="alert alert-info col-md-3 mx-auto">
        <span class="bi bi-door-open-fill" aria-hidden="true"></span>
        <strong> Hov!</strong> Du skal være logget på en koordinator bruger for at se denne side.
    </div>
}



@code {
    private List<Vagt> vagtListe;
    private List<Vagt> vagtListeUnsorted;
    private List<Opgave> opgaveListe;
    private List<Opgave> opgaveListeUnsorted;
    private List<string> status;
    private string sorteringsInput;
    private List<Kompetence> alleKompetencer = new List<Kompetence>();
    private bool editMode = false;

    // Henter lister over alle vagter, alle opgaver og alle mulige statusser
    protected override async Task OnInitializedAsync()
    {
        vagtListeUnsorted = await Http.GetFromJsonAsync<List<Vagt>>("Vagt/all");

        vagtListe = vagtListeUnsorted.OrderBy(q => q.Opgave_Id).ToList();

        opgaveListeUnsorted = await Http.GetFromJsonAsync<List<Opgave>>("Opgave/all");

        opgaveListe = opgaveListeUnsorted.OrderBy(q => q.Status).ToList();

        status = await Http.GetFromJsonAsync<List<string>>("Status/all");
    }

    // Sorterer i opgaverne. Opretter først en constructor og så en funktion der sorterer
    public string SorteringsInput
    {
        get
        {
            return sorteringsInput;
        }
        set
        {
            sorteringsInput = value;

            SorterOpgaver();
        }
    }

    // Sorterer opgavelisten (opgaveListe) ud fra tre forskellige kriterier.
    private void SorterOpgaver()
    {
        if (sorteringsInput == "Status")
        {
            opgaveListe = opgaveListe.OrderBy(q => q.Status).ToList();
        }
        else if (sorteringsInput == "Flest ledige vagter")
        {
            // Finder antal ledige vagter pr. opgave og gemmer dem i hver opgaves attribut (opgave.LedigeVagter)
            foreach (var opgave in opgaveListe)
            {
                List<Vagt> opgaveVagter = FindVagtOpgave(opgave, vagtListe);

                opgave.LedigeVagter = opgaveVagter.FindAll(q => q.Bruger_Id == null).Count();

                opgaveListe = opgaveListe.OrderByDescending(q => q.LedigeVagter).ToList();

            }

            opgaveListe = opgaveListe.OrderByDescending(q => q.LedigeVagter).ToList();
        }
        else if (sorteringsInput == "Ansvarlige team")
        {
            opgaveListe = opgaveListe.OrderBy(q => q.Team).ToList();

        }
    }

    // Finder vagter der tilhører en specifik opgave
    private List<Vagt> FindVagtOpgave(Opgave opgave, List<Vagt> vagtliste)
    {
        List<Vagt> vagtListe = new List<Vagt>();

        vagtListe = vagtliste.FindAll(q => q.Opgave_Id == opgave.Opgave_Id).OrderBy(q => q.Vagt_Id).ToList();

        return vagtListe;
    }

    // Finder antal ledige vagter pr. opgave
    private string FindAntalVagter(int opgave_id, List<Vagt> vagtListe)
    {
        int antalVagter = vagtListe.Count(q => q.Opgave_Id == opgave_id);

        int antalLedigeVagter = vagtListe.FindAll(q => q.Bruger_Id == null).Count();

        if (antalVagter == 0)
        {
            return "0 vagter i alt";
        }
        else if (antalVagter == 1 && antalLedigeVagter == 1)
        {
            return "1 / 1 vagter ledig";
        }
        else if (antalVagter == 1 && antalLedigeVagter == 0)
        {
            return "1 / 1 vagt dækket";
        }
        else if (antalVagter > 1 && antalLedigeVagter > 0)
        {
            return $"{antalLedigeVagter} / {antalVagter} vagter ledige";
        }
        else
        {
            return $"{antalVagter} / {antalVagter} vagter dækket";
        }
    }

    // Sletter opgave fra databasen
    private async Task SletOpgave(Opgave opgave)
    {
        await Http.PutAsJsonAsync<Opgave>("Opgave/slet", opgave);

        await OnInitializedAsync();
    }

    // Sletter vagt fra databasen
    private async Task SletVagt(Vagt vagt)
    {
        await Http.PutAsJsonAsync<Vagt>("Vagt/sletVagt", vagt);

        await OnInitializedAsync();
    }

    // Opdaterer vagt fra databasen
    private async Task OpdaterVagt(Vagt vagt)
    {
        await Http.PutAsJsonAsync<Vagt>("Vagt/opdaterVagt", vagt);

        await OnInitializedAsync();

        editMode = false;
    }

    // Opdaterer status på opgave
    private async Task OpdaterStatus(Opgave opgave)
    {
        await Http.PutAsJsonAsync<Opgave>("Opgave/opdaterOpgave", opgave);

        await OnInitializedAsync();

        editMode = false;

    }
}
