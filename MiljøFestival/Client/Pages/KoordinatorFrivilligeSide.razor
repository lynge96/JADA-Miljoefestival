@page "/koordinatorFrivilligeSide"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject MiljøFestival.Shared.Models.Bruger loggedInBruger

@if (brugerListeUnsorted == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!loggedInBruger.ErKoordinator())
{
    <div class="alert alert-info col-md-3 mx-auto">
        <span class="bi bi-door-open-fill" aria-hidden="true"></span>
        <strong> Hov!</strong> Du skal være logget på en koordinator bruger for at se denne side.
    </div>
}
else if (loggedInBruger.ErLoggetPå())
{
    <main class="col-md-7 mx-auto">

        <h1 class="display-4">Overblik over alle frivillige</h1>
        <p class="lead">
            Her har du mulighed for at se alle frivillige på festivallen. Yderligere kan du flytte frivillige fra ét hold til et andet, hvis det skulle være nødvendigt.
            <br /> <br /><i>OBS:</i> Gøres dette, bliver alle vagterne, som brugeren eventuelt havde taget, frigivet tilbage til brugerens tidligere team. <br /><br />

        </p>

        <h2 class="mt-3">Formand</h2>

        <div class="table-responsive rounded mb-3">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th class="col-md-1">ID</th>
                        <th class="col-md-4">Navn</th>
                        <th class="col-md-3">Telefon</th>
                        <th class="col-md-4">Email</th>
                    </tr>
                </thead>
                <tbody>
                    @* Laver en række for hver formand  *@
                    @foreach (var bruger in formandListe)
                    {
                        <tr>
                            <th>@bruger.Bruger_Id</th>
                            <td>@bruger.Fornavn @bruger.Efternavn</td>
                            <td>@bruger.Telefon</td>
                            <td>@bruger.Email</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h2 class="mt-1">Frivillige</h2>
        <div class="flex-md-wrap mt-3">
            <p class="mb-0">Sorter efter: </p>
            @* Laver en chechkbox for hver kompetence der findes. Trykkes der på én af dem, hentes der en ny liste af frivillige,
                som er sorteret alt efter, hvilke kompetencer som er valgt
            *@
            @foreach (var kompetence in alleKompetencer)
            {
                <div class="form-check form-check-inline mb-2">
                    <input type="checkbox" class="form-check-input" id="defaultCheck" @onchange="eventArgs => { CheckboxKompetencer(kompetence, eventArgs.Value); }">
                    <label class="form-check-label" for="defaultCheck">@kompetence.Kompetence_Navn</label>
                </div>
            }
        </div>


        <div class="table-responsive rounded">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th class="col-md-1">ID</th>
                        <th class="col-md-2">Navn</th>
                        <th class="col-md-2">Telefon</th>
                        <th class="col-md-2">Email</th>
                        <th class="col-md-3">Adresse</th>
                        <th class="col-md-2">Team</th>
                    </tr>
                </thead>
                <tbody>
                    @* Laver en række med information for hver bruger, som har rollen frivillig *@
                    @foreach (var bruger in frivilligListe)
                    {
                        <tr>
                            <th>@bruger.Bruger_Id</th>
                            <td>@bruger.Fornavn @bruger.Efternavn</td>
                            <td>@bruger.Telefon</td>
                            <td>@bruger.Email</td>
                            <td>@bruger.Adresse</td>
                            <td>
                                @* Gør det muligt for koordinatoren at flytte den frivillig fra et team til et andet.
                                    Når der vælges et nyt team, kører OpdaterBurger(bruger) funktionen og opdaterer brugeren.
                                *@
                                <select class="form-select" @bind-value="bruger.Team" @onchange="() => OpdaterBruger(bruger)" @bind-value:event="oninput">
                                    @foreach (var team in teams)
                                    {
                                        <option value="@team" selected=@(bruger.Team == team)>@team</option>
                                    }
                                </select>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h2 class="mt-3">Koordinatorer</h2>

        <div class="table-responsive rounded">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th class="col-md-1">ID</th>
                        <th class="col-md-2">Navn</th>
                        <th class="col-md-2">Telefon</th>
                        <th class="col-md-2">Email</th>
                        <th class="col-md-3">Adresse</th>
                        <th class="col-md-2">Team</th>
                    </tr>
                </thead>
                <tbody>
                    @* Viser en liste over alle koordinatorer og deres information *@
                    @foreach (var bruger in koordinatorListe)
                    {
                        <tr>
                            <th>@bruger.Bruger_Id</th>
                            <td>@bruger.Fornavn @bruger.Efternavn</td>
                            <td>@bruger.Telefon</td>
                            <td>@bruger.Email</td>
                            <td>@bruger.Adresse</td>
                            <td>@bruger.Team</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </main>
}

@code {
    private List<Bruger> frivilligListe;
    private List<Bruger> koordinatorListe;
    private List<Bruger> brugerListeUnsorted;
    private List<Bruger> brugerListe;
    private List<Bruger> formandListe;
    private List<string> teams = new List<string>();
    private List<string> valgteKompetencer = new List<string>();
    private List<Kompetence> alleKompetencer = new List<Kompetence>();

    // Henter lister over brugere, frivillige, koordinatorer, formænd, teams og kompetencer
    protected override async Task OnInitializedAsync()
    {
        brugerListeUnsorted = await Http.GetFromJsonAsync<List<Bruger>>("Bruger/all");

        brugerListe = await HentKompetencer(brugerListeUnsorted);

        frivilligListe = brugerListeUnsorted.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

        koordinatorListe = brugerListeUnsorted.FindAll(q => q.Rolle_Id == 1);

        formandListe = brugerListeUnsorted.FindAll(q => q.Rolle_Id == 3);

        teams = await Http.GetFromJsonAsync<List<string>>("Team/all");

        alleKompetencer = await Http.GetFromJsonAsync<List<Kompetence>>("Kompetence/all");
    }

    // Sorterer frivillige efter valgte kompetencer vha. valgteKompetencer listen, der husker valget af tidligere valgte kompetencer.
    private void CheckboxKompetencer(Kompetence kompetence, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            List<Bruger> nyListe = new List<Bruger>();

            valgteKompetencer.Add(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }

                frivilligListe = nyListe;

                nyListe = new List<Bruger>();
            }
        }
        else
        {
            List<Bruger> nyListe = new();

            valgteKompetencer.Remove(kompetence.Kompetence_Navn);

            frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

            foreach (var valgteKompetence in valgteKompetencer.ToList())
            {
                foreach (var bruger in frivilligListe.ToList())
                {
                    if (bruger.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                    {
                        nyListe.Add(bruger);
                    }
                }

                frivilligListe = nyListe;

                nyListe = new List<Bruger>();
            }
        }
    }

    // Henter kompetencer for alle brugere
    private async Task<List<Bruger>> HentKompetencer(List<Bruger> brugerListe)
    {
        foreach (var bruger in brugerListe)
        {
            bruger.Kompetencer = await Http.GetFromJsonAsync<List<Kompetence>>($"Kompetence/brugerIDkompetence?bruger_id={bruger.Bruger_Id}");
        }

        return brugerListe;
    }

    // Opdaterer brugerens rolle
    private async Task OpdaterBruger(Bruger bruger)
    {
        bruger.Kode = "placeholder";

        await Http.PutAsJsonAsync<Bruger>("Bruger/opdaterFrivillig", bruger);


        // Sørger for at frivilliglisten stadig er sorteret efter valgte kompetencer
        List<Bruger> nyListe = new List<Bruger>();

        frivilligListe = brugerListe.FindAll(q => q.Rolle_Id == 2).OrderBy(q => q.Team).ToList();

        foreach (var valgteKompetence in valgteKompetencer.ToList())
        {
            foreach (var user in frivilligListe.ToList())
            {
                if (user.Kompetencer.Exists(q => q.Kompetence_Navn == valgteKompetence))
                {
                    nyListe.Add(user);
                }
            }

            frivilligListe = nyListe;

            nyListe = new List<Bruger>();
        }

    }
}