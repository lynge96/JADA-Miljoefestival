@page "/login"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject NavigationManager NavManager
@inject MiljøFestival.Shared.Models.Bruger LogedInBruger

@if (!LogedInBruger.ErLoggetPå())
{
    <main class="form-signin col-md-3 m-auto">
        <form>
            <h1 class="text-center">Log ind</h1>
            <div class="form-floating">
                <input type="email" class="form-control" id="floatingInput" placeholder="Email" @bind-value="bruger.Email" required>
                <label for="floatingInput">Email adresse</label>
            </div>
            <div class="form-floating">
                <input type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind-value="bruger.Kode" required>
                <label for="floatingPassword">Password</label>
            </div>
            <button class="w-100 btn btn-primary mt-3" type="button" @onclick="() => HandleSubmit()">Log ind</button>
            <p class="mt-3 mb-3 h6"><a class="nav-link text-decoration-underline" href="OpretBruger">Opret bruger</a></p>
            @if (feedback != string.Empty)
            {

            <div class="alert alert-warning">
                <span class="oi oi-key" aria-hidden="true"></span>
                <strong>Hov!</strong> - @feedback
            </div>

            }
        </form>
    </main>
}
else
{
    NavManager.NavigateTo("/");
}

@code {
    private Bruger bruger = new Bruger();

    protected void LogAf()
    {
        godkendt = string.Empty;

        @*LogedInBruger = new Bruger(); Virker ikke??*@
        LogedInBruger.Bruger_Id = 0;
        LogedInBruger.Fornavn = string.Empty;
        LogedInBruger.Efternavn = string.Empty;
        LogedInBruger.Telefon = string.Empty;
        LogedInBruger.Email = string.Empty;
        LogedInBruger.Adresse = string.Empty;
        LogedInBruger.Rolle_Id = 0;
        LogedInBruger.Rolle = string.Empty;
        LogedInBruger.Team_Id = 0;
        LogedInBruger.Team = string.Empty;
    }


    private string feedback = string.Empty;


    private async Task HandleSubmit()
    {

        IEnumerable<Bruger> verificerBruger = await TjekLogin(bruger);
        if (verificerBruger.Count() > 0)
        {
            var testBruger = verificerBruger.First();

            LogedInBruger.Bruger_Id = testbruger.Bruger_Id;
            LogedInBruger.Fornavn = testbruger.Fornavn;
            LogedInBruger.Efternavn = testbruger.Efternavn;
            LogedInBruger.Telefon = testbruger.Telefon;
            LogedInBruger.Email = testbruger.Email;
            LogedInBruger.Adresse = testbruger.Adresse;
            LogedInBruger.Rolle_Id = testbruger.Rolle_Id;
            LogedInBruger.Rolle = testbruger.Rolle;
            LogedInBruger.Team_Id = testbruger.Team_Id;
            LogedInBruger.Team = testbruger.Team;

            feedback = "Godkendt!";

            bruger = new Bruger();
            OnInitialized();
        }
        else
        {
            feedback = "Forkert login, prøv igen.";
        }
    }

    protected async Task<IEnumerable<Bruger>> TjekLogin(Bruger user)
    {

        return await Http.GetFromJsonAsync<IEnumerable<Bruger>>($"Bruger/tjeklogin?email={bruger.Email}&kode={bruger.Kode}");
    }

    protected override void OnInitialized()
    {
        NavManager.NavigateTo("/login");
    }
}