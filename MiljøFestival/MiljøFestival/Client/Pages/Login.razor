@page "/login"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject MiljøFestival.Shared.Models.Bruger LogedInBruger

<p>Bruger Id: @LogedInBruger.Bruger_Id</p>
<p>Koordinator?: @LogedInBruger.Koordinator</p>


<h1>Test dit login!</h1>

<p> @godkendt </p>

@if (!LogedInBruger.ErLoggetPå())
{
    <EditForm EditContext="@EditContext" class="row p-3" OnSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <div class="col-md-12 mb-3">
            <label for="Email">Email</label>
            <InputText id="Email" @bind-Value="bruger.Email" class="form-control" />
            <ValidationMessage For="@(() => bruger.Email)" />
        </div>
        <div class="col-md-12 mb-3">
            <label for="Kode">Kode</label>
            <InputText id="Kode" @bind-Value="bruger.Kode" class="form-control" />
            <ValidationMessage For="@(() => bruger.Kode)" />
        </div>
        <div class="col-12 mb-3">
            <button type="submit" class="btn btn-primary">Tjek</button>
        </div>
    </EditForm>
    <NavLink class="nav-link" href="opretbruger">
        <button class="btn btn-primary">Opret bruger</button>
    </NavLink>
}
else
{
    <div class="col-12 mb-3">
        <button @onclick="LogAf" class="btn btn-primary">Log af</button>
    </div>
}

@code {
    private Bruger bruger = new Bruger();
    private EditContext EditContext;
    private string godkendt = string.Empty;


    protected override void OnInitialized()
    {
        EditContext = new EditContext(bruger);

    }

    protected void LogAf()
    {
        godkendt = string.Empty;

        // LogedInBruger = new Bruger(); Virker ikke??
        LogedInBruger = new Bruger();
        //LogedInBruger.Bruger_Id = 0;
        //LogedInBruger.Fornavn = string.Empty;
        //LogedInBruger.Efternavn = string.Empty;
        //LogedInBruger.Telefon = string.Empty;
        //LogedInBruger.Email = string.Empty;
        //LogedInBruger.Adresse = string.Empty;
        //LogedInBruger.Koordinator = false;
    }

    protected async Task<IEnumerable<Bruger>> TjekLogin(Bruger user)
    {

        return await Http.GetFromJsonAsync<IEnumerable<Bruger>>($"Bruger/tjeklogin?email={bruger.Email}&kode={bruger.Kode}");

    }

    private async Task HandleSubmit()
    {

        IEnumerable<Bruger> verificerBruger = await TjekLogin(bruger);

        if (verificerBruger.Count() > 0)
        {
            var testbruger = verificerBruger.First();

            LogedInBruger.Bruger_Id = testbruger.Bruger_Id;
            LogedInBruger.Fornavn = testbruger.Fornavn;
            LogedInBruger.Efternavn = testbruger.Efternavn;
            LogedInBruger.Telefon = testbruger.Telefon;
            LogedInBruger.Email = testbruger.Email;
            LogedInBruger.Adresse = testbruger.Adresse;
            LogedInBruger.Koordinator = testbruger.Koordinator;

            godkendt = "Godkendt!";

            bruger = new Bruger();


        }
        else
        {
            godkendt = "Forkert, prøv igen...";
        }
    }

}