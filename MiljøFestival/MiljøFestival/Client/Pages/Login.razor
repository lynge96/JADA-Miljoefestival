@page "/login"
@using MiljøFestival.Shared.Models
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject MiljøFestival.Shared.Models.Bruger LogedInBruger

<p> @godkendt </p>

@if (!LogedInBruger.ErLoggetPå())
{
    <div class="loginContainer col-md-4">
        <div class="col-9">
            <h1 class="display-3">Log in</h1>
            <div class="form-floating mt-4">
                <input type="email" class="form-control" id="loginEmail" @bind-value="bruger.Email" placeholder="Email">
                <label for="loginEmail">E-mail</label>
            </div>
            <div class="form-floating mt-4">
                <input type="password" class="form-control" id="loginPassword" @bind-value="bruger.Kode" placeholder="Password">
                <label for="loginPassword">Password</label>
            </div>
            <div class="row">
                <div class="col 5 mt-4">
                    <button class="btn btn-primary" type="button" @onclick="() => HandleSubmit()">Log in</button>
                </div>
                <div class="col-7 mt-4">
                    <button class="btn btn-secondary" type="button"><a class="nav-link" href="OpretBruger">Opret bruger</a></button>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <div class="col-12 mb-3">
        <button @onclick="LogAf" class="btn btn-primary">Log af</button>
    </div>
}

@code {
    private Bruger bruger = new Bruger();
    private EditContext EditContext;
    private string godkendt = string.Empty;


    protected override void OnInitialized()
    {
        EditContext = new EditContext(bruger);

    }

    protected void LogAf()
    {
        godkendt = string.Empty;

        @*LogedInBruger = new Bruger(); Virker ikke??*@
        LogedInBruger.Bruger_Id = 0;
        LogedInBruger.Fornavn = string.Empty;
        LogedInBruger.Efternavn = string.Empty;
        LogedInBruger.Telefon = string.Empty;
        LogedInBruger.Email = string.Empty;
        LogedInBruger.Adresse = string.Empty;
        LogedInBruger.Koordinator = false;
    }


    private async Task HandleSubmit()
    {

        IEnumerable<Bruger> verificerBruger = await TjekLogin(bruger);

        if (verificerBruger.Count() > 0)
        {
            var testbruger = verificerBruger.First();

            LogedInBruger.Bruger_Id = testbruger.Bruger_Id;
            LogedInBruger.Fornavn = testbruger.Fornavn;
            LogedInBruger.Efternavn = testbruger.Efternavn;
            LogedInBruger.Telefon = testbruger.Telefon;
            LogedInBruger.Email = testbruger.Email;
            LogedInBruger.Adresse = testbruger.Adresse;
            LogedInBruger.Koordinator = testbruger.Koordinator;

            godkendt = "Godkendt!";

            bruger = new Bruger();


        }
        else
        {
            godkendt = "Forkert, prøv igen...";
        }
    }


    protected async Task<IEnumerable<Bruger>> TjekLogin(Bruger user)
    {

        return await Http.GetFromJsonAsync<IEnumerable<Bruger>>($"Bruger/tjeklogin?email={bruger.Email}&kode={bruger.Kode}");

    }

}